{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","state","react_default","a","createElement","className","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","titles","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAmBeA,6MAhBXC,MAAQ,2EAEJ,OAEOC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAAb,wDAPEC,aCcNC,6MAbXN,MAAQ,2EAEJ,OACIC,EAAAC,EAAAC,cAAA,QAAMI,SAAUC,KAAKC,MAAMC,YACxBT,EAAAC,EAAAC,cAAA,SAAQQ,KAAK,OAAQC,KAAK,OAAOC,YAAY,YAC7CZ,EAAAC,EAAAC,cAAA,SAAQQ,KAAK,OAAQC,KAAK,UAAUC,YAAY,eAChDZ,EAAAC,EAAAC,cAAA,qCAPIE,aCkCJS,6MAjCXd,MAAQ,2EAEJ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAERI,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAWf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACzCH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMM,KAA7C,MAAsDP,KAAKC,MAAMO,SADxB,KAI9CR,KAAKC,MAAMM,MAAQd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBACnBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMQ,aAD1B,KAInBT,KAAKC,MAAMM,MAAQd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACdH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMS,WAGlDV,KAAKC,MAAMM,MAAQd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACnBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAkBI,KAAKC,MAAMU,cAG7CX,KAAKC,MAAMW,OAASnB,EAAAC,EAAAC,cAAA,aAAKK,KAAKC,MAAMW,eAtB1Bf,aCKhBgB,SAAU,oCA+EDC,6MA3EbtB,MAAM,CACPiB,iBAAcM,EACdR,UAAMQ,EACNP,aAAUO,EACVL,cAAWK,EACXJ,iBAAcI,EACdH,WAAQG,KAITb,iDAAY,SAAAc,EAAMC,GAAN,IAAAV,EAAAC,EAAAU,EAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVP,EAAEQ,iBACIlB,EAAOU,EAAES,OAAOC,SAASpB,KAAKqB,MAC9BpB,EAAUS,EAAES,OAAOC,SAASnB,QAAQoB,MAHhCN,EAAAE,KAAA,EAIaK,MAAK,qDAAAC,OAAsDvB,EAAtD,KAAAuB,OAA8DtB,EAA9D,WAAAsB,OAA+EjB,EAA/E,kBAJlB,cAIJK,EAJII,EAAAS,KAAAT,EAAAE,KAAA,EAKON,EAASc,OALhB,OAKNb,EALMG,EAAAS,KAOTxB,GAAQC,GACTyB,QAAQC,IAAIf,GACdgB,EAAKC,SAAU,CACb3B,YAAcU,EAAKkB,KAAKC,KACxB/B,KAAOY,EAAKf,KACZI,QAAUW,EAAKoB,IAAI/B,QACnBE,SAAWS,EAAKkB,KAAK3B,SACrBC,YAAcQ,EAAKqB,QAAQ,GAAG7B,YAC9BC,MAAQ,OAGJuB,EAAKC,SAAU,CACnB3B,iBAAcM,EACdR,UAAOQ,EACPP,aAAUO,EACVL,cAAWK,EACXJ,iBAAcI,EACdH,MAAQ,0BAxBE,yBAAAU,EAAAmB,SAAAzB,oIA6BR,OAEJvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACfH,EAAAC,EAAAC,cAAE+C,EAAF,MADA,MAEAjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACfH,EAAAC,EAAAC,cAACgD,EAAD,CAAOzC,WAAYF,KAAKE,aAClCT,EAAAC,EAAAC,cAAC6C,EAAD,CACA/B,YAAeT,KAAKR,MAAMiB,YAC1BF,KAAQP,KAAKR,MAAMe,KACnBC,QAASR,KAAKR,MAAMgB,QACpBE,SAAUV,KAAKR,MAAMkB,SACrBC,YAAaX,KAAKR,MAAMmB,YACxBC,MAAOZ,KAAKR,MAAMoB,qBA1DAf,aCGE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e7150076.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Titles extends Component {\n    state = {  }\n    render() { \n        return ( \n               \n               <div>\n                   <h1 className=\"title-container__title\">Weather Finder</h1>\n                   <p className=\"title-container__subtitle\"> Find out Temperature conditions and more...</p>\n                   </div>\n             \n\n\n\n         );\n    }\n}\n \nexport default Titles;","import React, { Component } from 'react';\n\nclass Form extends Component {\n    state = {  }\n    render() { \n        return (  \n            <form onSubmit={this.props.getWeather}> \n               < input type=\"text\"  name=\"city\" placeholder=\"City...\" />\n               < input type=\"text\"  name=\"country\" placeholder=\"Country...\"/>\n               <button>Get Weather</button>\n\n            </form>\n        );\n    }\n}\n \nexport default Form;","import React, { Component } from 'react';\n\nclass Weather extends Component {\n    state = {  }\n    render() { \n        return ( \n          <div className=\"weather__info\">\n             { \n                 this.props.city && this.props.country && <p className=\"weather__key\">Location : \n                 <span className=\"weather__value\">{this.props.city} , {this.props.country}</span> </p> \n                 }\n        {\n            this.props.city && <p className=\"weather__key\">Temperature :\n            <span className=\"weather__value\">{this.props.temperature}</span> </p> \n            } \n        {\n            this.props.city && <p className=\"weather__key\">Humidity :\n                 <span className=\"weather__value\">{this.props.humidity}</span></p> \n            }\n        {\n            this.props.city && <p className=\"weather__key\">Conditions : \n            <span className=\"weather__value\">{this.props.description}</span></p> \n            } \n        {\n            this.props.error && <p> {this.props.error}</p> \n            } \n        \n              \n\n          </div>\n\n\n         );\n    }\n}\n \nexport default Weather;","import React, { Component } from 'react';\nimport Titles from \"./components/titles\"\nimport Form from \"./components/form\"\nimport Weather from \"./components/weather\"\nimport \"./App.css\" ;\n\n\nconst API_KEY = \"fb53cadbf27b64914085122652d9ab07\"\n\nclass App extends Component {\n\n  state={\n temperature : undefined ,\n city: undefined ,\n country : undefined ,\n humidity : undefined ,\n description : undefined ,\n error : undefined ,\n\n  }\n\ngetWeather= async(e) => {\n  e.preventDefault() ;\n  const city = e.target.elements.city.value ;\n  const country = e.target.elements.country.value ;\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}&units=metric`) ; \nconst data = await api_call.json() ;\n\nif(city && country) {\n  console.log(data) ;\nthis.setState ({\n  temperature : data.main.temp ,\n  city : data.name ,\n  country : data.sys.country ,\n  humidity : data.main.humidity ,\n  description : data.weather[0].description ,\n  error : \" \"\n})\n}\nelse {this.setState ({\n  temperature : undefined,\n  city : undefined ,\n  country : undefined ,\n  humidity : undefined ,\n  description : undefined ,\n  error : \" Please Enter Values \" ,\n})\n}\n}\n  render() {\n    return (\n\n<div>\n  <div className=\"wrapper\">\n    <div className=\"main\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col -xs-5 title-container\">\n          < Titles />  </div>\n          <div className=\"col -xs-7 form-container\">\n          <Form  getWeather={this.getWeather}/>\n<Weather\ntemperature = {this.state.temperature}\ncity = {this.state.city}\ncountry={this.state.country}\nhumidity={this.state.humidity}\ndescription={this.state.description}\nerror={this.state.error} />\n\n\n            </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n</div>\n\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\" \nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}